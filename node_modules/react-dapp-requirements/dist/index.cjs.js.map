{"version":3,"file":"index.cjs.js","sources":["../src/utils.js","../src/CkeckForBrowser.js","../src/CheckForWeb3.js","../src/CheckForNetwork.js","../src/CheckForAccount.js","../src/DappRequirements.js"],"sourcesContent":["export const promisify = (inner) => {\n    return new Promise((resolve, reject) => {\n        inner((error, result) => {\n            if (error) {\n                reject(error)\n            }\n            resolve(result);\n        });\n    })\n};\n\nexport const promiseWithTimeout = (millis, promise) => {\n    const timeout = new Promise((resolve, reject) =>\n        setTimeout(\n            () => reject(`promise.timeout`),\n            millis));\n    return Promise.race([\n        promise,\n        timeout\n    ]);\n};\n\nexport const centeredStyle = {\n    \"height\": \"100vh\",\n    \"display\": \"flex\",\n    \"flex-direction\": \"column\",\n    \"align-items\": \"center\",\n    \"justify-content\": \"center\",\n}\n","import React, {Component} from 'react';\nimport PropTypes from \"prop-types\";\nimport {centeredStyle} from \"./utils\";\n\nclass BrowserUnsupportedScreen extends Component {\n    render() {\n        return <div style={centeredStyle}>\n            <h1>\n                Your browser is not supported\n            </h1>\n            <p>\n                To access the application you need to install Chrome, Firefox, Opera, or Brave\n            </p>\n        </div>\n    }\n}\n\nclass CheckForBrowser extends Component {\n    static propTypes = {\n        isBrowserSupported: PropTypes.func.isRequired,\n        BrowserUnsupportedComponent: PropTypes.func,\n    };\n\n    static defaultPros = {\n        BrowserUnsupportedComponent: BrowserUnsupportedScreen\n    };\n\n    render() {\n        const {BrowserUnsupportedComponent, isBrowserSupported} = this.props;\n        if (!isBrowserSupported()) {\n            return <BrowserUnsupportedComponent/>\n        }\n        return this.props.children;\n    }\n}\n\nexport default CheckForBrowser;\n","import React, {Component} from 'react';\nimport PropTypes from \"prop-types\";\nimport {centeredStyle} from \"./utils\";\n\n\nclass Web3UnavailableScreen extends Component {\n    render() {\n        return <div style={centeredStyle}>\n            <h1>\n                No connection to Ethereum\n            </h1>\n            <p>\n                You will need a way to connect and interact with Ethereum through the Browser. The perfect way is\n                Metamask.\n\n            </p>\n            <a href=\"https://metamask.io\" rel=\"noopener noreferrer\" target=\"_blank\">\n                Install Metamask\n            </a>\n            <p>\n                or <a rel=\"noopener noreferrer\"\n                      href=\"https://consensys.zendesk.com/hc/en-us/categories/360000441452-Using-MetaMask\"\n                      target=\"_blank\">learn\n                more</a> about Metamask\n            </p>\n        </div>\n    }\n}\n\nclass CheckForWeb3 extends Component {\n\n    static propTypes = {\n        web3Provided: PropTypes.func.isRequired,\n        Web3UnavailableComponent: PropTypes.func,\n    };\n\n    static defaultProps = {\n        Web3UnavailableComponent: Web3UnavailableScreen\n    };\n\n    render() {\n        const {Web3UanvailableComponent, web3Provided} = this.props;\n        if (!web3Provided()) {\n            return <Web3UnavailableComponent/>\n        }\n        return this.props.children;\n    }\n}\n\nexport default CheckForWeb3;\n","import React, {Component} from 'react';\nimport PropTypes from \"prop-types\";\nimport {centeredStyle, promiseWithTimeout} from \"./utils\";\n\n\nclass NetworkNotSupportedScreen extends Component {\n    render() {\n        const {currentNetwork, supportedNetworks} = this.props;\n        return <div style={centeredStyle}>\n            <h1>\n                {currentNetwork}  is not supported\n            </h1>\n            <p>\n                You must switch to : {supportedNetworks.join(',')}\n            </p>\n        </div>\n    }\n}\n\nclass NetworkNotFoundScreen extends Component {\n    render() {\n        return <div style={centeredStyle}>\n            <h1>\n                Ethereum network not found\n            </h1>\n            <p>\n                Check your internet connection and your Metamask and the reload the application\n            </p>\n\n        </div>\n    }\n}\n\nclass LoadingScreen extends Component {\n    render() {\n        return <div style={centeredStyle}>\n            <p>Checking network information</p>\n        </div>\n    }\n}\n\n\nclass CheckForNetwork extends Component {\n\n    static propTypes = {\n        fetchNetwork: PropTypes.func.isRequired,\n        networkMap: PropTypes.object.isRequired,\n        supportedNetworks: function (props, propName) {\n            if (!Array.isArray(props.supportedNetworks) || !props.supportedNetworks.every((prop) => typeof prop === \"string\")) {\n                return new Error(`${propName} needs to be an array and contain at least one ETH network id`);\n            }\n            return null\n        },\n        onNetworkIdReceived: PropTypes.func,\n        NetworkNotSupportedComponent: PropTypes.func,\n        LoadingComponent: PropTypes.func,\n        NetworkNotFoundComponent: PropTypes.func,\n    };\n\n    static defaultProps = {\n        NetworkNotSupportedComponent: NetworkNotSupportedScreen,\n        LoadingComponent: LoadingScreen,\n        NetworkNotFoundComponent: NetworkNotFoundScreen,\n        numberOfRetries: 3,\n    };\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: true,\n            hasNetworkConnection: true,\n            retries: 0,\n            networkId: null\n        }\n    }\n\n    getNetworkById = (networkId) => {\n        if (!this.props.networkMap.hasOwnProperty(networkId)) return `PRIVATE:${networkId}`;\n        return this.props.networkMap[networkId];\n    };\n\n    componentWillMount() {\n        this.fetchData();\n    }\n\n    onNetworkIdReceived = (networkId) => {\n        if (this.props.onNetworkIdReceived) this.props.onNetworkIdReceived(networkId);\n    };\n\n    fetchData = () => {\n        try {\n            promiseWithTimeout(500, this.props.fetchNetwork()).then((result) => {\n                const networkId = result;\n                this.setState({\n                    loading: false,\n                    networkId,\n                });\n                this.onNetworkIdReceived(networkId);\n            }).catch(e => {\n                if (this.state.retries >= this.props.numberOfRetries) {\n                    this.setState({\n                        loading: false,\n                        hasNetworkConnection: false\n                    });\n                    this.onNetworkIdReceived(null);\n                } else {\n                    console.log('retry');\n                    this.setState({retries: this.state.retries + 1});\n                    this.fetchData();\n                }\n\n            });\n        } catch (e) {\n            throw new Error(\"this.props.fetchNetwork does not return a prommise!\")\n        }\n    };\n\n\n    render() {\n        const {\n            NetworkNotSupportedComponent,\n            NetworkNotFoundComponent,\n            LoadingComponent,\n            supportedNetworks\n        } = this.props;\n        const isSupportedNetwork = supportedNetworks.length === 0 || supportedNetworks.indexOf(this.state.networkId) >= 0;\n        const labelsForSupportedNetworks = supportedNetworks.map((networkId) => {\n            return this.getNetworkById(networkId)\n        });\n        if (this.state.loading) {\n            return <LoadingComponent/>\n        }\n\n        if (!this.state.hasNetworkConnection) {\n            return <NetworkNotFoundComponent/>\n        }\n\n        if (!isSupportedNetwork) {\n            return <NetworkNotSupportedComponent currentNetwork={this.getNetworkById(this.state.networkId)}\n                                                 supportedNetworks={labelsForSupportedNetworks}/>\n        }\n        return this.props.children;\n    }\n}\n\nexport default CheckForNetwork;\n","import React, {Component} from 'react';\nimport {centeredStyle, promiseWithTimeout} from \"./utils\";\nimport PropTypes from \"prop-types\";\n\n\nclass AccountUnavailableScreen extends Component {\n    render() {\n        return <div style={centeredStyle}>\n            <h1>\n                Your Metamask is locked\n            </h1>\n            <p>\n                Simply open Metamask and follow the instructions to unlock it.\n            </p>\n        </div>\n    }\n}\n\nclass LoadingScreen extends Component {\n    render() {\n        return <div style={centeredStyle}>\n            <p>Checking account information</p>\n        </div>\n    }\n\n}\n\nclass CheckForAccount extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: true,\n            selectedAccount: null,\n        };\n    }\n\n    static propTypes = {\n        fetchAccount: PropTypes.func.isRequired,\n        pullInterval: PropTypes.number,\n        onAccountChange: PropTypes.func,\n        AccountUnavailableComponent: PropTypes.func,\n        LoadingComponent: PropTypes.func,\n    };\n\n    static defaultProps = {\n        AccountUnavailableComponent: AccountUnavailableScreen,\n        LoadingComponent: LoadingScreen,\n        pullInterval: 500,\n    };\n\n    componentDidMount() {\n        this.fetchData();\n        this.startPulling();\n    }\n\n    componentWillUnmount() {\n        this.stopPulling();\n    }\n\n    stopPulling = () => {\n        clearInterval(this.interval);\n        this.interval = null;\n    };\n\n    startPulling = () => {\n        if (this.interval) return;\n        this.interval = setInterval(this.fetchData, this.props.pullInterval)\n    };\n\n    onAccountChange = (account) => {\n        if (this.props.onAccountChange) this.props.onAccountChange(account);\n    };\n\n    fetchData = () => {\n        try {\n            promiseWithTimeout(this.props.pullInterval - 50, this.props.fetchAccount()).then((result) => {\n                const selectedAccount = result.shift();\n                console.log('selected Account',selectedAccount)\n                if (selectedAccount !== this.state.selectedAccount) {\n                    this.setState({\n                        selectedAccount,\n                        loading: false\n                    });\n                    console.log('change')\n                    this.onAccountChange(selectedAccount);\n                }\n            }).catch(e => {\n                // ignore timeout. We only care about web3 errors\n                if(e !== 'promise.timeout') {\n                    this.setState({\n                        selectedAccount: null,\n                        loading: false\n                    });\n                    this.onAccountChange(null);\n                }\n\n            });\n        } catch (e) {\n            throw new Error(\"this.props.fetchAccount does not return a prommise!\")\n        }\n    };\n\n    render() {\n        const {AccountUnavailableComponent, LoadingComponent} = this.props;\n\n        if (this.state.loading) {\n            return <LoadingComponent/>;\n        }\n        console.log('reder',this.state.selectedAccount)\n        if (!this.state.selectedAccount) {\n            return <AccountUnavailableComponent/>\n        }\n        return this.props.children;\n    }\n}\n\nexport default CheckForAccount;\n","import React, {Component} from 'react';\nimport CheckForBrowser from \"./CkeckForBrowser\";\nimport CheckForAccount from \"./CheckForAccount\";\nimport CheckForWeb3 from \"./CheckForWeb3\";\nimport CheckForNetwork from \"./CheckForNetwork\";\nimport {promisify} from \"./utils\";\nimport PropTypes from \"prop-types\";\n\n\nclass DappRequirements extends Component {\n\n    static propTypes = {\n        supportedNetworks: PropTypes.array.isRequired,\n        networkMap: PropTypes.object,\n        web3Provided: PropTypes.func,\n        fetchAccount: PropTypes.func,\n        fetchNetwork: PropTypes.func,\n        isBrowserSupported: PropTypes.func,\n        onNetworkIdReceived: PropTypes.func,\n        onAccountChange: PropTypes.func,\n        Web3UnavailableComponent: PropTypes.func,\n        BrowserUnsupportedComponent: PropTypes.func,\n        AccountUnavailableComponent: PropTypes.func,\n        AccountLoadingComponent: PropTypes.func,\n        NetworkNotSupportedComponent: PropTypes.func,\n        NetworkLoadingComponent: PropTypes.func,\n        NetworkNotFoundComponent: PropTypes.func,\n    };\n\n    static defaultProps = {\n        web3Provided: () => {\n            return window.web3;\n        },\n        supportedNetworks: [4, 99999],\n        isBrowserSupported: () => {\n            //We support only Firefox, Brave and Chrome as they are the only ones with metamask support\n            return navigator.userAgent.match(/(opera|chrome|firefox)\\/?\\s*(\\.?\\d+(\\.\\d+)*)/i);\n        },\n        fetchAccount: () => {\n            const {web3} = window;\n            return promisify(web3.eth.getAccounts);\n        },\n        fetchNetwork: () => {\n            const {web3} = window;\n            if (typeof web3.version === \"string\") {\n                return web3.eth.net.getId();\n            } else if (web3.version.api) {\n                return promisify(web3.version.getNetwork);\n            }\n        },\n\n        networkMap: {\n            \"1\": 'MAINNET',\n            \"2\": 'MORDEN',\n            \"3\": 'ROPSTEN',\n            \"4\": 'RINKEBY',\n            \"42\": 'KOVAN',\n        },\n    };\n\n    render() {\n        //used to skip rendering of components in a test env\n        const {bypassChecks} = window;\n        const {\n            BrowserUnsupportedComponent,\n            isBrowserSupported,\n            Web3UnavailableComponent,\n            web3Provided,\n            supportedNetworks,\n            NetworkNotSupportedComponent,\n            NetworkLoadingComponent,\n            NetworkNotFoundComponent,\n            fetchNetwork,\n            onNetworkIdReceived,\n            AccountUnavailableComponent,\n            AccountLoadingComponent,\n            fetchAccount,\n            onAccountChange\n\n        } = this.props;\n\n        return <React.Fragment>\n            {!bypassChecks ? <CheckForBrowser BrowserUnsupportedComponent={BrowserUnsupportedComponent}\n                                              isBrowserSupported={isBrowserSupported}>\n                <CheckForWeb3 Web3UnavailableComponent={Web3UnavailableComponent} web3Provided={web3Provided}>\n                    <CheckForNetwork LoadingComponent={NetworkLoadingComponent}\n                                     NetworkNotFoundComponent={NetworkNotFoundComponent}\n                                     NetworkNotSupportedComponent={NetworkNotSupportedComponent}\n                                     networkMap={this.props.networkMap}\n                                     onNetworkIdReceived={onNetworkIdReceived}\n                                     fetchNetwork={fetchNetwork}\n                                     supportedNetworks={supportedNetworks}>\n                        <CheckForAccount AccountUnavailableComponent={AccountUnavailableComponent}\n                                         LoadingComponent={AccountLoadingComponent}\n                                         fetchAccount={fetchAccount}\n                                         onAccountChange={onAccountChange}>\n                            {this.props.children}\n                        </CheckForAccount>\n                    </CheckForNetwork>\n                </CheckForWeb3>\n            </CheckForBrowser> : this.props.children}\n        </React.Fragment>;\n    }\n}\n\n\nexport default DappRequirements\n"],"names":["promisify","inner","Promise","resolve","reject","error","result","promiseWithTimeout","millis","promise","timeout","setTimeout","race","centeredStyle","BrowserUnsupportedScreen","React","Component","CheckForBrowser","props","BrowserUnsupportedComponent","isBrowserSupported","children","propTypes","PropTypes","func","isRequired","defaultPros","Web3UnavailableScreen","CheckForWeb3","Web3UanvailableComponent","web3Provided","defaultProps","NetworkNotSupportedScreen","currentNetwork","supportedNetworks","join","NetworkNotFoundScreen","LoadingScreen","CheckForNetwork","state","fetchData","NetworkNotSupportedComponent","NetworkNotFoundComponent","LoadingComponent","isSupportedNetwork","length","indexOf","networkId","labelsForSupportedNetworks","map","getNetworkById","loading","hasNetworkConnection","object","propName","Array","isArray","every","prop","Error","networkMap","hasOwnProperty","onNetworkIdReceived","fetchNetwork","then","setState","catch","retries","numberOfRetries","log","e","AccountUnavailableScreen","CheckForAccount","stopPulling","interval","startPulling","setInterval","pullInterval","onAccountChange","account","fetchAccount","selectedAccount","shift","AccountUnavailableComponent","number","DappRequirements","window","bypassChecks","Web3UnavailableComponent","NetworkLoadingComponent","AccountLoadingComponent","array","web3","navigator","userAgent","match","eth","getAccounts","version","net","getId","api","getNetwork"],"mappings":"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"}